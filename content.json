{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"python基础","date":"2021-02-23T16:58:28.998Z","updated":"2021-02-23T16:42:37.869Z","comments":true,"path":"2021/02/24/python基础/","link":"","permalink":"http://example.com/2021/02/24/python%E5%9F%BA%E7%A1%80/","excerpt":"","text":"@TOC 前言用博客的方式记录一下自己的学习过程。先从python学起吧 一、Python简介python是一个高层次的结合了解释性、编译性、互动性的面向对象的脚本语言。 ​ **python是一种解释型语言： **解释型语言没有编译环节。 ​ **python是交互式语言： **可以在python提示符&gt;&gt;&gt;后面直接执行代码 ​ python是面向对象的语言：Python支持面向对象的风格或代码封装在对象的编程技术。 1.python发展历史Python 是由 Guido van Rossum 在八十年代末和九十年代初，在荷兰国家数学和计算机科学研究所设计出来的。 Python 本身也是由诸多其他语言发展而来的,这包括 ABC、Modula-3、C、C++、Algol-68、SmallTalk、Unix shell 和其他的脚本语言等等。 像 Perl 语言一样，Python 源代码同样遵循 GPL(GNU General Public License)协议。 现在 Python 是由一个核心开发团队在维护，Guido van Rossum 仍然占据着至关重要的作用，指导其进展。 Python 2.0 于 2000 年 10 月 16 日发布，增加了实现完整的垃圾回收，并且支持 Unicode。 Python 3.0 于 2008 年 12 月 3 日发布，此版不完全兼容之前的 Python 源代码。不过，很多新特性后来也被移植到旧的Python 2.6/2.7版本。 Python 3.0 版本，常被称为 Python 3000，或简称 Py3k。相对于 Python 的早期版本，这是一个较大的升级。 Python 2.7 被确定为最后一个 Python 2.x 版本，它除了支持 Python 2.x 语法外，还支持部分 Python 3.1 语法。 2.python特点 1.易于学习：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。 2.易于阅读：Python代码定义的更清晰。 3.易于维护：Python的成功在于它的源代码是相当容易维护的。 4.一个广泛的标准库：Python的最大的优势之一是丰富的库，跨平台的，在UNIX，Windows和Macintosh兼容很好。 5.互动模式：互动模式的支持，您可以从终端输入执行代码并获得结果的语言，互动的测试和调试代码片断。 6.可移植：基于其开放源代码的特性，Python已经被移植（也就是使其工作）到许多平台。 7.可扩展：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。 8.数据库：Python提供所有主要的商业数据库的接口。 9.GUI编程：Python支持GUI可以创建和移植到许多系统调用。 10.可嵌入: 你可以将Python嵌入到C/C++程序，让你的程序的用户获得”脚本化”的能力。 二、安装Pythonpython是一个支持多平台的语言，支持Linux、Windows、macOS等系统。除了官网下载python安装包进行下载也可以下载Anaconda进行安装。 1.Windows安装 一定要添加环境变量，可以安装在自己想要的环境。 2.Linux安装Linux系统下下载对应版本的源码压缩包，解压后运行即可， 1234# tar -zxvf Python-3.6.1.tgz# cd Python-3.6.1# ./configure# make &amp;&amp; make install 3.macOS安装macOS系统自带python2.7版本环境，也可以通过官网下载最新版本python3进行安装。 三、运行方式1.命令行模式 通过win+R打开命令行，输入python运行python 2.IDLE模式 打开IDEL运行pythonIDEL 3.运行脚本​ 1、命令行脚本： 12345$ python script.py 或者C:&gt;python script.py ​ 2、集成开发环境IDE：Pycharm 四、常用开发工具PyCharm VSCode Sublime Text 五、编码规范1.代码编码​ 1、文件编码和python编码格式全部为utf-8，在python代码开头统一添加# -- coding: utf-8 --。 2.命名规范​ 1、包名、模块名、局部变量名、函数名 ​ 全小写、下划线式 ​ 2、全局变量 ​ 全大写、下划线式驼峰 ​ 3、类名 ​ 首字母大写式驼峰 ​ 4、变量名命名 ​ 尽量体现变量的数据类型和具体意义 六、模块管理1.模块和包项目体积的增大所有代码都放在一个文件中，无法满需求，使用模块和包解决这个问题，模块可以将一些相关联的代码组合在一个py文件中，包可以将一些相关联的模块组合在一个文件夹中。 2.模块导入​ 1、import ​ 导入某个模块，如果使用模块中的函数或者方法变量，则需要使用模块名.xxx形式调用。 ​ 2、from xxx import xxx ​ 从某个模块中导入某个对象或者方法，也可以一次性从模块中导入所有的对象， 12from c import c_method //导入单个对象或方法from c import * //导入模块中所有的方法 ​ 3、from a import b as c ​ 从a中导入b并命名为c，在代码中引用b，通过c来引用 3.包包的本质是一个文件夹，是将一些相关联的模块组合在一起。但是想要让python识别这是一个包需要在文件夹中创建一个__init__.py一个文件夹中只有拥有了__init__.py这个文件才能视为一个包 同一个包中的模块如果需要相互导入可以使用from . import xxx 4.python __all__变量用法__all__变量是一个特殊的变量，可以用在py文件中也可以用在__init__.py中 1、普通模块 ​ 表示一个模块中允许哪些属性可以被导入到别的模块中 ​ __all__变量是为了限制或者指定能被导入到别的模块的函数、类、全局变量等，如果指定了就只能导入指定的内容，如果没有指定则都可以导入，私有属性除外。 12345678__all__&#x3D;[&#39;test&#39;,&#39;hello&#39;,&#39;Person&#39;]test &#x3D; &#39;python&#39;def hello(): print(&#39;hello&#39;)class Person(object): def __init__(self): print(&#39;person init method&#39;) 2、在包下的__init__.py文件中 添加__all__=[&quot;echo&quot;,&quot;sound&quot;,&quot;reverse&quot;] 时在使用from xxx import *时包含其中三个模块，当__init__.py为空时，只是导入这个包，并非导入整个模块 5.模块、包安装​ 1、使用pip进行安装 123456789101112131415161718192021222324252627282930pip --version # Python2.x 版本命令 pip3 --version # Python3.x 版本命令 pip install request #安装模块 pip install django == 1.10.5 #安装指定版本的包pip uninstall request #卸载模块pip install -U django #升级包 $ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py # 下载安装脚本$ sudo python get-pip.py # 运行安装脚本 $ sudo python3 get-pip.py # 运行安装脚本。 pip show #显示安装包信息 pip search SomePackage #搜索指定包 pip list #列出以安装的包 #升级包 Linux pip install --upgrade pip # python2.xpip3 install --upgrade pip # python3.xWindows python -m pip install -U pip # python2.xpython -m pip3 install -U pip # python3.x #未安装pip python -m ensurepip --default-pip ​ 总结今天的内容就这些啦，有不足的地方以后再补充。","categories":[],"tags":[]},{"title":"","slug":"MySQL基础","date":"2021-02-10T08:20:49.798Z","updated":"2021-02-10T08:22:58.070Z","comments":true,"path":"2021/02/10/MySQL基础/","link":"","permalink":"http://example.com/2021/02/10/MySQL%E5%9F%BA%E7%A1%80/","excerpt":"","text":"数据库的基本概念DataBase DB 什么是数据库？ ​ 用于存储和管理数据的仓库 SQL​ 1、什么是SQL？ ​ 结构化查询语言，定义了操作所有关系型数据库的规则 ​ 2、SQL通用语法 ​ SQL语句可以单行或多行书写，以分号结尾 ​ 可使用空格缩进来增强语句的可读性 ​ MySQL数据库的SQL语句不区分大小写，关键字建议使用大写 1三种注释：单行注释-- 注释或者#注释、多行注释 &#x2F;*注释*&#x2F; ​ 3、SQL分类 ​ 1）DDL 数据定义语言，用来定义数据库对象：数据库、表、列等，关键字create、drop、alert等 ​ 2）DML数据操作语言，用来堆数据库中表的数据进行增删改，关键字insert、delete、update等 ​ 3）DQL数据查询语言，用来查询数据库中表的记录，关键字select、where等 ​ 4）DCL数据库控制语言，GRANT7REVOKE等 DDL 操作数据库、表 ​ 操作数据库：CRUD ​ C 创建 ​ R 查询 ​ show databases; ​ U 修改 ​ D 删除 操作表： ​ 1、创建 12345 create table 表名&#123;​ 列名1 数据类型; 列名2 数据类型; 列名n 数据类型;​ &#125; ​ 数据类型： 1、int：整型 2、double 小数类型 3、date：日期，包含年月日，yyyy-MM-dd 4、datetime：日期，包含年月日时分秒 5、时间戳类型 包含年月日时分秒 6、varchar：字符串 name varchar(20) 创建表 12345678create table student( id int, name varchar(20), age int, score double(4,1), birthday date, insert_time timestamp); 复制表 1create table 表名 like 被复制的表名； DML 增删改表中的数据 123456789101112131415161718192021221. 添加数据： * 语法： * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n); * 注意： 1. 列名和值要一一对应。 2. 如果表名后，不定义列名，则默认给所有列添加值 insert into 表名 values(值1,值2,...值n); 3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来2. 删除数据： * 语法： * delete from 表名 [where 条件] * 注意： 1. 如果不加条件，则删除表中所有记录。 2. 如果要删除所有记录 1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作 2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。3. 修改数据： * 语法： * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件]; * 注意： 1. 如果不加任何条件，则会将表中所有记录全部修改。 ​ DQL 查询表中的记录 1234567891011121314151617* select * from 表名;1. 语法： select 字段列表 from 表名列表 where 条件列表 group by 分组字段 having 分组之后的条件 order by 排序 limit 分页限定 12345678910111213142. 基础查询 1. 多个字段的查询 select 字段名1，字段名2... from 表名； * 注意： * 如果查询所有字段，则可以使用*来替代字段列表。 2. 去除重复： * distinct 3. 计算列 * 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算） * ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null * 表达式1：哪个字段需要判断是否为null * 如果该字段为null后的替换值。 4. 起别名： * as：as也可以省略 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354553. 条件查询 1. where子句后跟条件 2. 运算符 * &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt; * BETWEEN...AND * IN( 集合) * LIKE：模糊查询 * 占位符： * _:单个任意字符 * %：多个任意字符 * IS NULL * and 或 &amp;&amp; * or 或 || * not 或 ! -- 查询年龄大于20岁 SELECT * FROM student WHERE age &gt; 20; SELECT * FROM student WHERE age &gt;= 20; -- 查询年龄等于20岁 SELECT * FROM student WHERE age = 20; -- 查询年龄不等于20岁 SELECT * FROM student WHERE age != 20; SELECT * FROM student WHERE age &lt;&gt; 20; -- 查询年龄大于等于20 小于等于30 SELECT * FROM student WHERE age &gt;= 20 &amp;&amp; age &lt;=30; SELECT * FROM student WHERE age &gt;= 20 AND age &lt;=30; SELECT * FROM student WHERE age BETWEEN 20 AND 30; -- 查询年龄22岁，18岁，25岁的信息 SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25 SELECT * FROM student WHERE age IN (22,18,25); -- 查询英语成绩为null SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断 SELECT * FROM student WHERE english IS NULL; -- 查询英语成绩不为null SELECT * FROM student WHERE english IS NOT NULL; -- 查询姓马的有哪些？ like SELECT * FROM student WHERE NAME LIKE &#x27;马%&#x27;; -- 查询姓名第二个字是化的人 SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;; -- 查询姓名是3个字的人 SELECT * FROM student WHERE NAME LIKE &#x27;___&#x27;; -- 查询姓名中包含德的人 SELECT * FROM student WHERE NAME LIKE &#x27;%德%&#x27;;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2021-02-10T07:14:42.150Z","updated":"2021-02-10T07:14:42.150Z","comments":true,"path":"2021/02/10/hello-world/","link":"","permalink":"http://example.com/2021/02/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}